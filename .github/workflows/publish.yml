name: publish

on:
  release:
    types:
      - published

jobs:
  publish:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.8]
        os: [ubuntu-latest]
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2.3.3
      - name: setting up python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.1.4
        with:
          python-version: ${{ matrix.python-version }}
      - name: "set pip cache dir"
        run: echo "::set-env name=pip-cache::$(pip cache dir)"
      - name: caching pip storage
        uses: actions/cache@v3.0.10
        with:
          path: ${{ env.pip-cache }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/poetry.lock') }}
      - name: installing poetry
        run: |
          pip install poetry
          pip install poetry-dynamic-versioning
      - name: "set poetry cache dir"
        run: |
          echo "::set-env name=poetry-cache::$(poetry config cache-dir)"
          echo "::set-env name=poetry-version::$(poetry --version)"
      - name: caching poetry environment
        uses: actions/cache@v3.0.10
        with:
          path: ${{ env.poetry-cache }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ env.poetry-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ env.poetry-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: installing dependencies
        run: poetry install -n -vv --no-ansi
      - name: running tests
        run: poetry run green -vv
      - name: building
        run: poetry build -n -vv --no-ansi
      - name: generate coverage xml
        run: poetry run coverage xml
      - name: uploading coverage to codecov
        uses: codecov/codecov-action@v1.0.13
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: python ${{ matrix.python-version }} on ${{ runner.os }}
      - name: publishing
        run: poetry publish -n -vv --no-ansi
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
